//
//  Operation+LifeCycle.swift
//  multithreading
//
//  Created by Егор Бадмаев on 07.05.2022.
//

import Foundation

// Operation & Operation Queue
// Operation - это абстрактный класс, предоставляющий код и данные, связанные с задачей.
// Или - это абстрактный класс, предоставляющий потокобезопасную структуру для моделирования состояния операции, её приоритета

// Operation Queue похожа на DispatchQueue - абстрактная структура данных с приоритетами
// Операционная очередь выполняет свои очереди объектов Operation на основе их приоритета и готовности.

/// # Жизненный цикл Operation
/// `isReady` говорит о том, что операция готова для выполнения (свойство выставлено в `true`). Свойство выставлено в `false`, если зависимые операции еще не выполнились. Обычно у вас нет прямой необходимости для того, чтобы переопределять это свойство. Если готовность ваших операций определяется не только через зависимые операции, вы можете предоставить свою собственную имплементацию `isReady` и определять готовность операции для выполнения самостоятельно.
/// `isExecuting` означает, что операция выполняется в данный момент. `True` если операция выполняется, `false` если нет. Если вы переопределяете метод `start`, вы также должны переопределить `isExecuting` и отправлять KVO нотификации, когда статус выполнения вашей операции изменился.
/// `isFinished` означает, что операция была успешно завершена или отменена. Пока свойство будет выставлено в `false`, операция будет находиться в operation queue. Если вы переопределяете метод `start`, вы также должны переопределить `isFinished` и отправлять KVO нотификации, когда ваша операция будет выполнена или отменена.
/// `isCancelled` означает, что запрос об отмене операции был отправлен. Поддержку отмены операции вы должны реализовать самостоятельно.
